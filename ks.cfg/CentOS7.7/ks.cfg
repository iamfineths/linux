auth --enableshadow --passalgo=sha512
cdrom
text
install
firstboot --disable
ignoredisk --only-use=sda
keyboard --vckeymap=us --xlayouts='us'
lang en_US.UTF-8

#network  --bootproto=static --device=eth0 --onboot=on --noipv6 --nodns --activate
network  --bootproto=static --device=eth1 --onboot=off --noipv6 --nodns --no-activate
#network  --hostname=localhost.localdomain

rootpw --iscrypted ######
skipx
logging --level=info
reboot
selinux --disabled
firewall --disabled

#services --disabled="chronyd"
services --enabled="sshd,chronyd"

timezone Asia/Shanghai --isUtc --nontp
bootloader --location=mbr --boot-drive=sda
clearpart --all --initlabel
zerombr

part /boot --asprimary --fstype="ext4" --ondisk=sda --size=200
part swap --fstype="swap" --ondisk=sda --size=4000
part / --asprimary --fstype="ext4" --ondisk=sda --size=46000
part /data --fstype="ext4" --grow --ondisk=sda --size=1

%packages
@^minimal
@core

%end

#%pre --log=/mnt/sysimage/root/ks-pre.log
%pre

chvt 3
exec </dev/tty3> /dev/tty3

clear
read -p "
Please Enter Hostname?
" NAME /dev/tty3 2>&1
echo "${NAME}" > localhostname
echo "127.0.0.1 ${NAME} localhost" > hosts

clear
read -p "
#Would You Like to Setup which Services?

    1. - tomcat
    2. - redis
    3. - nginx
    4. - php5
    5. - mysql5.6
    6. - mysql5.7
    7. - httpsqs
    8. - rabbitmq

    0. - Mulit[s]

Please Enter Your Number.
" PACKAGES 2>&1

case ${PACKAGES} in

    "1") echo "tomcat" > softsrc;;
    "2") echo "redis" > softsrc;;
    "3") echo "nginx" > softsrc;;
    "4") echo "php5" > softsrc;;
    "5") echo "mysql56" > softsrc;;
    "6") echo "mysql57" > softsrc;;
    "7") echo "httpsqs" > softsrc;;
    "8") echo "rabbitmq" > softsrc;;

    "0")

read -p "
Please Enter The Service You Would Like To Setup, Then Separate by Space, Such As \"nginx php5 mysql56\"

 - tomcat
 - redis
 - nginx
 - php5
 - php7
 - mysql56
 - mysql57
 - httpsqs
 - rabbitmq

" ENTER 2>&1
        echo "${ENTER}" > softsrc
        ;;

    "*"):;;
esac

chvt 1
exec < /dev/tty1 > /dev/tty1

%end

###############################
#%post --nochroot --log=/mnt/sysimage/root/ks-nochpost.log
%post --nochroot

cp -r /mnt/install/repo/data/. /mnt/sysimage/data
/bin/rm -f /mnt/sysimage/etc/yum.repos.d/*.repo

cp -Rvf hosts /mnt/sysimage/etc/hosts
cp -Rvf localhostname /mnt/sysimage/etc/hostname

if [ -f softsrc ];then /bin/cp -Rvf softsrc /mnt/sysimage/etc/softsrc;fi

%end

###############################
#%post --log=/root/ks-post.log
%post

___=`hostname`
/usr/bin/hostnamectl --static set-hostname `cat /etc/hostname`

#### 删除不必需目录 ####
rm -rf /data/lost+found
find /data/* -type f -name "TRANS.TBL" | xargs rm -f

#### 创建所需目录 ####
mkdir -p /data/{apps,backup,logs}

#### 从 ISO 拷贝文件与目录 ####
cp -r /data/init.d/{.ssh,.vim} /root/ && chmod 700 /root/.ssh && chmod 600 /root/.ssh/{authorized_keys,id_rsa}
cp -f /data/init.d/local.repo /etc/yum.repos.d/

#### 优化项 1. ####
cat > /etc/profile.d/99bashrc.sh << _EOF_

######### SYSTEM ADMINISTRATOR CONFIGURATION ##########
alias grep='grep --colour=always'

export TERM=linux
export EDITOR=vim
export PS1='[\[\e[36;1m\]\u@\[\e[32;1m\]\`hostname\`\[\e[31;1m\] \t\[\e[36;1m\]\w\[\e[0m\]]# '
_EOF_

#### 优化项 2. ####
cat >> /var/spool/cron/root << _EOF_
0 0 * * * /usr/sbin/ntpdate cn.pool.ntp.org >> /var/log/ntpdate.log;/sbin/clock -w
_EOF_

#### 优化项 3. 开机显示 ####
cat > /etc/motd << _EOF_
System Administrator (v1.0 2020.01.01)
_EOF_

#### 优化项 4. ####
cat > /etc/security/limits.d/99limits.conf << _EOF_
* soft nofile 65535
* hard nofile 65535
_EOF_

#### 优化项 5. ####
cat > /etc/profile.d/99ulimit.sh << _EOF_
ulimit -HSc unlimited
ulimit -HSn 65535
_EOF_

#### 优化项 6. 内核参数 ####
cat > /etc/sysctl.d/net.ipv4.conf << _EOF_
######## SYSTEM ADMINISTRATOR CONFIGURE ########
net.ipv4.ip_forward = 0
net.ipv4.conf.default.rp_filter = 1
net.ipv4.conf.default.accept_source_route = 0
kernel.sysrq = 0
kernel.core_uses_pid = 1
net.ipv4.tcp_syncookies = 1

kernel.msgmnb = 65536
kernel.msgmax = 65536
kernel.shmmax = 68719476736
kernel.shmall = 4294967296

net.core.wmem_default = 8388608
net.core.rmem_default = 8388608
net.core.rmem_max = 16777216
net.core.wmem_max = 16777216
net.core.netdev_max_backlog = 262144
net.core.somaxconn = 4000

net.ipv4.tcp_max_tw_buckets = 60000
net.ipv4.tcp_sack = 0
net.ipv4.tcp_window_scaling = 1
net.ipv4.tcp_rmem = 4096 87380 4194304
net.ipv4.tcp_wmem = 4096 16384 4194304



net.ipv4.tcp_max_orphans = 3276800
net.ipv4.tcp_max_syn_backlog = 262144
net.ipv4.tcp_timestamps = 0
net.ipv4.tcp_synack_retries = 1
net.ipv4.tcp_syn_retries = 2
net.ipv4.tcp_tw_recycle = 1
net.ipv4.tcp_tw_reuse = 1
net.ipv4.tcp_mem = 94500000 915000000 927000000
net.ipv4.tcp_fin_timeout = 30
net.ipv4.tcp_keepalive_time = 30
net.ipv4.tcp_keepalive_intvl = 30
net.ipv4.tcp_keepalive_probes = 3
net.ipv4.ip_local_port_range = 1024 65000

vm.overcommit_memory = 1
_EOF_

#### 修改 SSHD 配置 ####
sed -i -e "/#UseDNS yes/c UseDNS no" \
-i -e "/PrintLastLog yes/c PrintLastLog no" \
-i -e "/^PasswordAuthentication yes/c PasswordAuthentication no" \
-i -e "/#PermitRootLogin yes/c PermitRootLogin without-password" \
-i -e "/^GSSAPIAuthentication yes/c GSSAPIAuthentication no" \
-i -e "/^#LogLevel INFO/a\LogLevel DEBUG" /etc/ssh/sshd_config

#### 修改 SUDO 配置 ####
#sed -i "/^#includedir/c includedir /etc/sudoers.d" /etc/sudoers
cat > /etc/sudoers.d/zabbix <<_EOF_
zabbix ALL=(root) NOPASSWD:/bin/netstat, /usr/local/jdk/bin/jps
_EOF_

#### 修改活跃控制台 ####
echo "ACTIVE_CONSOLES=/dev/tty[1-2]" >> /etc/sysconfig/init

#### 修改 yum 32位软件包不安装 ####
grep -q 'exclude=\*.i?86' /etc/yum.conf || sed -i '/\[main\]/a \exclude=*.i?86\nminrate=1\ntimeout=300' /etc/yum.conf

#### YUM 安装 PACKAGES ####
#[ `curl -I -m 10 -o /dev/null -s -w %{http_code} https://mirrors.aliyun.com/centos/7/extras/x86_64/` -eq 200 ] && {
[ `curl -I -m 10 -o /dev/null -s -w %{http_code} http://192.168.100.127/7/local-extras/` -eq 200 ] && {

    #### 安装 VIM 编辑器 ####
    yum -q -y install vim-minimal vim-filesystem vim-enhanced vim-common && {
        mv /bin/vi /bin/vi.bak && ln -s /usr/bin/vim /bin/vi
    }

    #### 安装其它软件 ####
    yum -y install yum-utils device-mapper-persistent-data lvm2 libcgroup libseccomp container-selinux container-selinux
    yum -y install NetworkManager-tui iptables-services iptables
    yum -y install lrzsz bzip2 unzip wget git npm dos2unix rpcbind nfs-utils ntpdate screen
    yum -y install mysql perl-DBD-MySQL
    yum -y install setuptool net-tools  ntsysv redhat-lsb
    yum -y groupinstall "Development Tools"
    yum -y install gcc gcc-c++ autoconf automake make  pcre-devel openssl openssl-devel libaio zeromq flannel
    yum -y install libxml2-devel bzip2 bzip2-devel libcurl-devel libjpeg-devel libpng-devel freetype-devel libmcrypt-devel readline-devel

}

for i in tuned systemd-udevd systemd-logind systemd-journald postfix polkit irqbalance dbus auditd atd;do systemctl disable ${i}.service;done

#### 安装 SALT ####
tar -zxf /data/init.d/salt/Python-2.7.17.tar.gz -C /usr/local/ && {

    ln -sf /usr/local/Python-2.7.17/bin/salt /usr/sbin/salt
    ln -sf /usr/local/Python-2.7.17/bin/salt-api /usr/sbin/salt-api
    ln -sf /usr/local/Python-2.7.17/bin/salt-call /usr/sbin/salt-call
    ln -sf /usr/local/Python-2.7.17/bin/salt-cloud /usr/sbin/salt-cloud
    ln -sf /usr/local/Python-2.7.17/bin/salt-cp /usr/sbin/salt-cp
    ln -sf /usr/local/Python-2.7.17/bin/salt-key /usr/sbin/salt-key
    ln -sf /usr/local/Python-2.7.17/bin/salt-master /usr/sbin/salt-master
    ln -sf /usr/local/Python-2.7.17/bin/salt-minion /usr/sbin/salt-minion
    ln -sf /usr/local/Python-2.7.17/bin/salt-proxy /usr/sbin/salt-proxy
    ln -sf /usr/local/Python-2.7.17/bin/salt-run /usr/sbin/salt-run
    ln -sf /usr/local/Python-2.7.17/bin/salt-ssh /usr/sbin/salt-ssh
    ln -sf /usr/local/Python-2.7.17/bin/salt-syndic /usr/sbin/salt-syndic
    ln -sf /usr/local/Python-2.7.17/bin/salt-unity /usr/sbin/salt-unity

    \cp -f /data/init.d/salt/salt-minion /etc/init.d/ && chmod u+x /etc/init.d/salt-minion
    chkconfig --level 3 salt-minion on

    ln -sf /usr/local/Python-2.7.17/bin/ansible /usr/sbin/ansible
    ln -sf /usr/local/Python-2.7.17/bin/ansible-config /usr/sbin/ansible-config
    ln -sf /usr/local/Python-2.7.17/bin/ansible-connection /usr/sbin/ansible-connection
    ln -sf /usr/local/Python-2.7.17/bin/ansible-console /usr/sbin/ansible-console
    ln -sf /usr/local/Python-2.7.17/bin/ansible-doc /usr/sbin/ansible-doc
    ln -sf /usr/local/Python-2.7.17/bin/ansible-galaxy /usr/sbin/ansible-galaxy
    ln -sf /usr/local/Python-2.7.17/bin/ansible-inventory /usr/sbin/ansible-inventory
    ln -sf /usr/local/Python-2.7.17/bin/ansible-playbook /usr/sbin/ansible-playbook
    ln -sf /usr/local/Python-2.7.17/bin/ansible-pull /usr/sbin/ansible-pull
    ln -sf /usr/local/Python-2.7.17/bin/ansible-test /usr/sbin/ansible-test
    ln -sf /usr/local/Python-2.7.17/bin/ansible-vault /usr/sbin/ansible-vault

    echo 'export ANSIBLE_CONFIG=/data/conf/ansible' > /etc/profile.d/ansible.sh
    mkdir -p /data/logs/ansible

}

#### 安装 zabbix ####
tar -zxf /data/init.d/zabbix/zabbix-3.2.11.tar.gz -C /usr/local/ && {

    cp -f /data/init.d/zabbix/zabbix_agentd /etc/init.d/ && chmod u+x /etc/init.d/zabbix_agentd

    if ! id zabbix &>/dev/null;then useradd -M zabbix -s /sbin/nologin;fi
    install -o zabbix -g zabbix -d /data/logs/zabbix
    chkconfig --level 3 zabbix_agentd on

    chown -R zabbix.zabbix /data/conf/zabbix && chmod u+x /data/conf/zabbix/bin/*

}

#### 安装 JDK ####
mv /data/init.d/java/jdk-1.8.0_172.tar.gz /data/softsrc/
tar -zxf /data/softsrc/jdk-1.8.0_172.tar.gz -C /usr/local/
pushd /usr/local &>/dev/null
ln -sf jdk-1.8.0_172 jdk
echo -e 'export JAVA_HOME=/usr/local/jdk\nexport JRE_HOME=/usr/local/jdk/jre\nexport JAVA_FONTS=/usr/local/java/jre/lib/fonts\nexport CLASSPATH=$JAVA_HOME/lib:$JAVA_HOME/lib/tools.jar\nexport PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin' > /etc/profile.d/java.sh
popd &>/dev/null

#### 初始化 GIT 环境 ####
git config --global user.name "deployment"
git config --global user.email "deployment@jerry.com"

#### 安装软件 ####
for i in `cat /etc/softsrc`;do

    case ${i} in
        "tomcat")

            mv /data/init.d/java/apache-tomcat-8.5.51.tar.gz /data/softsrc/

            tar -zxf /data/softsrc/apache-tomcat-8.5.51.tar.gz -C /usr/local/

            pushd /usr/local &>/dev/null
            ln -sf apache-tomcat-8.5.51 tomcat

            if ! id tomcat &>/dev/null;then useradd tomcat && echo "######" | passwd --stdin tomcat;fi
            \cp -fp /data/init.d/java/tomcat /etc/init.d/ && chmod u+x /etc/init.d/tomcat && chkconfig --level 3 tomcat on

            #mv /usr/local/apache-tomcat-8.5.51/bin/catalina.sh{,_bek}
            #\cp -fp /data/init.d/java/catalina.sh /usr/local/apache-tomcat-8.5.51/bin/
            #chmod u+x /usr/local/apache-tomcat-8.5.51/bin/catalina.sh

            echo -e 'export TOMCAT_HOME=/usr/local/tomcat\nexport PATH=$PATH:$TOMCAT_HOME/bin' > /etc/profile.d/tomcat.sh
            echo 'tomcat ALL=(ALL)  NOPASSWD: /etc/init.d/tomcat' > /etc/sudoers.d/tomcat
            popd &>/dev/null
            ;;

        "redis")

            mv /data/init.d/redis/redis-3.2.13.tar.gz /data/softsrc/
            pushd /data/softsrc/ &>/dev/null
            tar zxf redis-3.2.13.tar.gz && pushd redis-3.2.13 &>/dev/null && make PREFIX=/usr/local/redis-3.2.13 install && popd &>/dev/null
            mkdir /usr/local/redis-3.2.13/{log,run,conf}
            pushd /usr/local/ &>/dev/null && ln -sf redis-3.2.13 redis && popd &>/dev/null
            popd &>/dev/null

            \cp -fp /data/init.d/redis/redis_6379.conf /usr/local/redis-3.2.13/conf/
            \cp -fp /data/init.d/redis/redis_6379 /etc/init.d/ && chmod u+x /etc/init.d/redis_6379 && chkconfig --level 3 redis_6379 on
            ;;

        "nginx")

            ! getent passwd www &>/dev/null && useradd -M www -s /bin/false

            mv /data/init.d/nginx/nginx-1.16.1.tar.gz /data/softsrc/

            pushd /data/softsrc/ &>/dev/null
            tar zxf nginx-1.16.1.tar.gz

            pushd nginx-1.16.1 &>/dev/null
            ./configure --prefix=/usr/local/nginx-1.16.1 --user=www --group=www --with-http_realip_module --with-http_stub_status_module --with-http_ssl_module --with-http_flv_module --with-http_stub_status_module --with-http_gzip_static_module --with-pcre && make -j 16 && make install
            popd &>/dev/null

            pushd /usr/local &>/dev/null
            ln -sf nginx-1.16.1 nginx
            popd &>/dev/null

            mkdir /usr/local/nginx-1.16.1/conf/sites
            mkdir /data/logs/nginx

            mv /data/init.d/nginx/fcgi.conf /usr/local/nginx-1.16.1/conf/
            \cp -fp /data/init.d/nginx/nginx.conf /usr/local/nginx-1.16.1/conf/

            mv /data/init.d/nginx/nginxd /etc/init.d/ && chmod u+x /etc/init.d/nginxd && chkconfig --level 3 nginxd on

            popd &>/dev/null

            \cp -fp /data/init.d/nginx/logrotate.nginx /usr/local/nginx/conf/
            echo '59 23 * * *  /usr/sbin/logrotate -f /usr/local/nginx/conf/logrotate.nginx' >> /var/spool/cron/root
            ;;

        "php5")
            ! getent passwd www &>/dev/null && useradd -M www -s /bin/false

            mv /data/init.d/php5/php-5.6.40.tar.gz /data/softsrc
            mv /data/init.d/php5/redis-3.1.6.tgz /data/softsrc/

            pushd /data/softsrc &>/dev/null
            tar zxf php-5.6.40.tar.gz
            tar zxf redis-3.1.6.tgz

            pushd php-5.6.40 &>/dev/null

            ./configure -prefix=/usr/local/php-5.6.40 \
            -with-config-file-path=/usr/local/php-5.6.40/etc \
            --enable-fpm \
            --with-fpm-user=www \
            --with-fpm-group=www \
            --with-mysql=mysqlnd \
            --with-mysqli=mysqlnd \
            --with-pdo-mysql=mysqlnd \
            --with-libxml-dir \
            --with-openssl \
            --with-kerberos \
            --with-pcre-regex \
            --enable-bcmath \
            --with-bz2 \
            --enable-calendar \
            --enable-mbstring \
            --with-curl \
            --enable-exif \
            --with-gd \
            --with-jpeg-dir \
            --with-png-dir \
            --with-zlib-dir \
            --with-freetype-dir \
            --enable-gd-native-ttf \
            --with-gettext \
            --with-mhash \
            --with-mcrypt \
            --enable-pcntl \
            --with-readline \
            --enable-shmop \
            --enable-soap \
            --enable-sockets \
            --enable-sysvmsg \
            --enable-sysvsem \
            --enable-sysvshm \
            --enable-zip \
            --enable-ftp && make && make install

            popd &>/dev/null

            pushd /usr/local &>/dev/null
            ln -sf php-5.6.40 php
            popd &>/dev/null

            mv /data/init.d/php5/{php.ini,php-fpm.conf} /usr/local/php-5.6.40/etc/
            mv /data/init.d/php5/php-fpm /etc/init.d/ && chmod u+x /etc/init.d/php-fpm && chkconfig --level 3 php-fpm on

            pushd redis-3.1.6 &>/dev/null
            /usr/local/php/bin/phpize
            ./configure --with-php-config=/usr/local/php/bin/php-config && make && make install
            popd &>/dev/null

            mkdir -p /data/logs/php

            popd &>/dev/null

            \cp -fp /data/init.d/php5/logrotate.php /usr/local/php/etc/
            echo '59 23 * * *  /usr/sbin/logrotate -f /usr/local/php/etc/logrotate.php' >> /var/spool/cron/root

            ;;

        "httpsqs")
            mv /data/init.d/httpsqs/libevent-2.0.12-stable.tar.gz /data/softsrc
            mv /data/init.d/httpsqs/tokyocabinet-1.4.47.tar.gz /data/softsrc
            mv /data/init.d/httpsqs/httpsqs-1.7.tar.gz /data/softsrc

            pushd /data/softsrc &>/dev/null
            tar zxf libevent-2.0.12-stable.tar.gz
            tar zxf tokyocabinet-1.4.47.tar.gz
            tar zxf httpsqs-1.7.tar.gz

            pushd libevent-2.0.12-stable &>/dev/null
            ./configure --prefix=/usr/local/libevent-2.0.12-stable/ && make && make install
            popd &>/dev/null

            pushd tokyocabinet-1.4.47 &>/dev/null
            ./configure --prefix=/usr/local/tokyocabinet-1.4.47/ && make && make install
            popd &>/dev/null

            pushd httpsqs-1.7 &>/dev/null
            make && make install
            popd &>/dev/null

            mv /data/init.d/httpsqs/httpsqs /etc/init.d/
            chmod u+x /etc/init.d/httpsqs
            chkconfig --level 3 httpsqs on

            popd &>/dev/null
            ;;

        "rabbitmq")
            mv /data/init.d/rabbitmq/{rabbitmq-server-3.6.15-1.el6.noarch.rpm,erlang-19.0.4-1.el6.x86_64.rpm,socat-1.7.3.2-1.el6.lux.x86_64.rpm} /data/softsrc/

            rpm -ivh /data/softsrc/socat-1.7.3.2-1.el6.lux.x86_64.rpm
            rpm -ivh /data/softsrc/erlang-19.0.4-1.el6.x86_64.rpm
            rpm -ivh /data/softsrc/rabbitmq-server-3.6.15-1.el6.noarch.rpm
            chkconfig --level 3 rabbitmq-server on

            /etc/init.d/rabbitmq-server start
            rabbitmq-plugins enable rabbitmq_management

            \cp -fp /data/init.d/rabbitmq/rabbitMQ.README /data/softsrc/
            ;;

        "mysql56")

            ! getent passwd mysql &>/dev/null && useradd -M mysql -s /bin/false

            HOST_NAME=`hostname`
            MYSQL_ID=`ifconfig eth0 | awk -F '[ :]+' 'NR==2 {print $3}' | awk -F "." '{print $3+100$4+100}'`
            MEMORYv=`free -g | awk '{if(/Mem/){print $2}}'`
            ((${MEMORYv}<8 && ${MEMORYv}>=7)) && MEMORY=6
            ((${MEMORYv}<16 && ${MEMORYv}>=15)) && MEMORY=12
            ((${MEMORYv}<32 && ${MEMORYv}>=30)) && MEMORY=26
            ((${MEMORYv}<96)) && ((${MEMORYv}>=90)) && MEMORY=76

            mv /data/init.d/MySQL5.6/mysql-5.6.46-linux-glibc2.12-x86_64.tar.gz /data/softsrc/

            pushd /data/softsrc &>/dev/null
            tar -zxvf mysql-5.6.46-linux-glibc2.12-x86_64.tar.gz -C /usr/local/
            popd &>/dev/null

            pushd /usr/local/ &>/dev/null
            ln -sf mysql-5.6.46-linux-glibc2.12-x86_64 mysql
            popd &>/dev/null

            chown -R mysql. /usr/local/{mysql,mysql-5.6.46-linux-glibc2.12-x86_64}

            install -o mysql -g mysql -d /data/mysql/conf
            chown -R mysql. /data/mysql

            \cp -fp /data/init.d/MySQL5.6/mysqld1 /etc/init.d/mysqld1 && chmod u+x /etc/init.d/mysqld1
            sed -i "s/####HOSTNAME####/${HOST_NAME}/g" /etc/init.d/mysqld1
            chkconfig --level 3 mysqld1 on

            \cp -fp /data/init.d/MySQL5.6/my1.cnf /data/mysql/conf/my1.cnf && chown mysql.mysql /data/mysql/conf/my1.cnf
            sed -i -e"s/####HOSTNAME####/${HOST_NAME}/g" -i -e"s/####MEMERY####/${MEMORY}/g" -i -e"s/####SERVERID####/${MYSQL_ID}/g" /data/mysql/conf/my1.cnf

            echo "/usr/local/mysql/lib" >>  /etc/ld.so.conf && ldconfig

            /usr/local/mysql/scripts/mysql_install_db --user=mysql --basedir=/usr/local/mysql --defaults-file=/data/mysql/conf/my1.cnf
            /etc/init.d/mysqld1 start

            chmod 755 /data/mysql/data1

            /usr/local/mysql/bin/mysqladmin -u root password '######' -S/data/mysql/data1/mysql.sock
            /usr/local/mysql/bin/mysql -uroot -S /data/mysql/data1/mysql.sock -p'######' -Bse "delete from mysql.user where password='';"
            /usr/local/mysql/bin/mysql -uroot -S /data/mysql/data1/mysql.sock -p'######' -Bse "drop database test;"
            /usr/local/mysql/bin/mysql -uroot -S /data/mysql/data1/mysql.sock -p'######' -Bse "GRANT ALL PRIVILEGES ON *.* TO '######'@'%' IDENTIFIED BY '######' WITH GRANT OPTION;"
            /usr/local/mysql/bin/mysql -uroot -S /data/mysql/data1/mysql.sock -p'######' -Bse "GRANT REPLICATION SLAVE ON *.* TO '######'@'%' IDENTIFIED BY '######' WITH GRANT OPTION;"
            /usr/local/mysql/bin/mysql -uroot -S /data/mysql/data1/mysql.sock -p'######' -Bse "GRANT PROCESS, SUPER, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO '######'@'localhost' IDENTIFIED BY '######' WITH GRANT OPTION;"

            /usr/local/mysql/bin/mysql -uroot -S /data/mysql/data1/mysql.sock -p'######' -Bse "CREATE USER '######'@'%' IDENTIFIED BY '######';"
            /usr/local/mysql/bin/mysql -uroot -S /data/mysql/data1/mysql.sock -p'######' -Bse "CREATE USER '######'@'%' IDENTIFIED BY '######';"

cat > /root/myPass.md << _EOF_
root : ######
###### : ######
###### : ######
###### : ######
###### : ######
_EOF_

cat >/usr/local/zabbix/etc/.my.cnf << _EOF_
[mysql]
user=######
password=######
socket=/data/mysql/data1/mysql.sock
[mysqladmin]
user=######
password=######
socket=/data/mysql/data1/mysql.sock
_EOF_

            echo '00 15 * * */3  cat /dev/null > /data/mysql/data1/`hostname`-slow.log' >> /var/spool/cron/root
            ;;

        "mysql57")

            ! getent passwd mysql &>/dev/null && useradd -M mysql -s /bin/false

            HOST_NAME=`hostname`
            MYSQL_ID=`ifconfig eth0 | awk -F '[ :]+' 'NR==2 {print $3}' | awk -F "." '{print $3+100$4+100}'`
            MEMORYv=`free -g | awk '{if(/Mem/){print $2}}'`
            ((${MEMORYv}<8 && ${MEMORYv}>=7)) && MEMORY=6
            ((${MEMORYv}<16 && ${MEMORYv}>=15)) && MEMORY=12
            ((${MEMORYv}<32 && ${MEMORYv}>=30)) && MEMORY=26
            ((${MEMORYv}<96)) && ((${MEMORYv}>=94)) && MEMORY=76

            mv /data/init.d/MySQL5.7/mysql-5.7.25-linux-glibc2.12-x86_64.tar.gz /data/softsrc/

            pushd /data/softsrc &>/dev/null
            tar -zxvf mysql-5.7.25-linux-glibc2.12-x86_64.tar.gz -C /usr/local/
            popd &>/dev/null

            pushd /usr/local/ &>/dev/null
            ln -sf mysql-5.7.25-linux-glibc2.12-x86_64 mysql
            popd &>/dev/null

            chown -R mysql. /usr/local/{mysql,mysql-5.7.25-linux-glibc2.12-x86_64}

            install -o mysql -g mysql -d /data/mysql/conf
            chown -R mysql. /data/mysql

            \cp -fp /data/init.d/MySQL5.7/mysqld1 /etc/init.d/mysqld1 && chmod u+x /etc/init.d/mysqld1
            sed -i "s/####HOSTNAME####/${HOST_NAME}/g" /etc/init.d/mysqld1
            chkconfig --level 3 mysqld1 on

            \cp -fp /data/init.d/MySQL5.7/my1.cnf /data/mysql/conf/my1.cnf && chown mysql.mysql /data/mysql/conf/my1.cnf
            sed -i -e"s/####HOSTNAME####/${HOST_NAME}/g" -i -e"s/####MEMERY####/${MEMORY}/g" -i -e"s/####SERVERID####/${MYSQL_ID}/g" /data/mysql/conf/my1.cnf

            rm -f /etc/my.cnf; pushd /etc/ &>/dev/null && ln -sf /data/mysql/conf/my1.cnf my.cnf && popd &>/dev/null

            echo "/usr/local/mysql/lib" >>  /etc/ld.so.conf && ldconfig

            /usr/local/mysql/bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/data/mysql/data1 > /tmp/mysql_init.log 2>&1
            /usr/local/mysql/bin/mysql_ssl_rsa_setup --basedir=/usr/local/mysql --datadir=/data/mysql/data1 >> /tmp/mysql_init.log 2>&1

            chmod 755 /data/mysql/data1; /etc/init.d/mysqld1 start

            PASSWD_IN_LINE=$(egrep "^.*A temporary password is generated for root@localhost:.*" /tmp/mysql_init.log); PASSWD=$(expr "${PASSWD_IN_LINE}" : '^.*A temporary password is generated for root@localhost: \(.*\)$')

            #### 初始化 ROOT 密码： ###### ####
            /usr/local/mysql/bin/mysql -uroot -p$PASSWD -S /data/mysql/data1/mysql.sock --connect-expired-password -Bse "set password = password('######');flush privileges;"

            /usr/local/mysql/bin/mysql -uroot -pEwan@2016\!@# -S /data/mysql/data1/mysql.sock --connect-expired-password -Bse "GRANT ALL PRIVILEGES ON *.* TO '######'@'10.20.30.%' IDENTIFIED BY '######' WITH GRANT OPTION;"
            #/usr/local/mysql/bin/mysql -uroot -pEwan@2016\!@# -S /data/mysql/data1/mysql.sock --connect-expired-password -Bse "UPDATE mysql.user SET grant_priv = 'Y' WHERE USER = '######';flush privileges;"

            /usr/local/mysql/bin/mysql -uroot -pEwan@2016\!@# -S /data/mysql/data1/mysql.sock --connect-expired-password -Bse "GRANT REPLICATION SLAVE ON *.* TO '######'@'10.20.30.%' IDENTIFIED BY '######' WITH GRANT OPTION;"
            /usr/local/mysql/bin/mysql -uroot -pEwan@2016\!@# -S /data/mysql/data1/mysql.sock --connect-expired-password -Bse "GRANT PROCESS, SUPER, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO '######'@'10.20.30.%' IDENTIFIED BY '######' WITH GRANT OPTION;"

            /usr/local/mysql/bin/mysql -uroot -pEwan@2016\!@# -S /data/mysql/data1/mysql.sock --connect-expired-password -Bse "create user '######'@'10.20.30.%' IDENTIFIED BY '######';"
            /usr/local/mysql/bin/mysql -uroot -pEwan@2016\!@# -S /data/mysql/data1/mysql.sock --connect-expired-password -Bse "create user '######'@'10.20.30.%' IDENTIFIED BY '######';"

cat > /root/myPass.md << _EOF_
root        : ######
######  : ######
######        : ######
######      : ######
######    : ######
_EOF_

cat >/usr/local/zabbix/etc/.my.cnf << _EOF_
[mysql]
user=######
password=######
socket=/data/mysql/data1/mysql.sock
[mysqladmin]
user=######
password=######
socket=/data/mysql/data1/mysql.sock
_EOF_

            ;;

        *):;;
    esac
done

#### 添加看日志帐号 ####
useradd seeLogs && echo "######" | passwd --stdin seeLogs
install -o seeLogs -g seeLogs -d /home/seeLogs/.ssh -m 0700
touch /home/seeLogs/.ssh/authorized_keys && chmod 600 /home/seeLogs/.ssh/authorized_keys && chown seeLogs.seeLogs /home/seeLogs/.ssh/authorized_keys

#### 拷贝 repo 文件 ####
rm -f /etc/yum.repos.d/local.repo
cp -f /data/init.d/{Centos-7.repo,epel-7.repo} /etc/yum.repos.d/

#### 清理临时文件 ####
rm -rf /data/init.d

#### 同步时钟 ####
/usr/sbin/ntpdate cn.pool.ntp.org >> /var/log/ntpdate.log;/sbin/clock -w

%end
